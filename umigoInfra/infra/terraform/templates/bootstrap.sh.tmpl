#!/bin/bash

set -uxo pipefail
BOOTSTRAP_LOG="/var/log/umigo-bootstrap.log"
exec > >(tee -a "$BOOTSTRAP_LOG") 2>&1
trap 'STATUS=$?; msg="[ $(date -Is)] ERROR running bootstrap at line $${LINENO} (exit $${STATUS})"; echo "$msg" | tee -a "$BOOTSTRAP_LOG" /var/log/cloud-init-output.log' ERR
AWS_REGION="${aws_region}"
ENVIRONMENT="${env}"
DEPLOY_USER="ec2-user"
APP_ROOT="/opt/umigo/backend"
LOG_ROOT="/var/log/umigo/backend"
SERVICE_FILE="/etc/systemd/system/umigo-backend.service"
ENV_FILE="$APP_ROOT/.env"

mkdir -p "$(dirname "$BOOTSTRAP_LOG")"

echo "[$(date -Is)] Starting user-data bootstrap" | tee -a "$BOOTSTRAP_LOG"

dnf -y update || echo "[$(date -Is)] WARNING: dnf update failed" | tee -a "$BOOTSTRAP_LOG"
dnf -y install amazon-ssm-agent git docker java-21-amazon-corretto awscli python3 ruby || echo "[$(date -Is)] WARNING: dnf install failed" | tee -a "$BOOTSTRAP_LOG"
systemctl enable amazon-ssm-agent && systemctl restart amazon-ssm-agent || echo "[$(date -Is)] WARNING: failed to enable SSM agent" | tee -a "$BOOTSTRAP_LOG"
usermod -aG docker "$DEPLOY_USER" || true

# Install or refresh the CodeDeploy agent so the instance participates in deployments
if ! systemctl status codedeploy-agent >/dev/null 2>&1; then
  echo "[$(date -Is)] Installing CodeDeploy agent" | tee -a "$BOOTSTRAP_LOG"
  installer_url="https://aws-codedeploy-$${AWS_REGION}.s3.$${AWS_REGION}.amazonaws.com/latest/install"
  curl -sSL "$installer_url" -o /tmp/codedeploy-install || echo "[$(date -Is)] WARNING: failed to download CodeDeploy installer" | tee -a "$BOOTSTRAP_LOG"
  if [ -f /tmp/codedeploy-install ]; then
    chmod +x /tmp/codedeploy-install
    /tmp/codedeploy-install auto >> "$BOOTSTRAP_LOG" 2>&1 || echo "[$(date -Is)] WARNING: CodeDeploy agent install script failed" | tee -a "$BOOTSTRAP_LOG"
    rm -f /tmp/codedeploy-install
  fi
fi
systemctl enable codedeploy-agent && systemctl restart codedeploy-agent || echo "[$(date -Is)] WARNING: unable to start CodeDeploy agent" | tee -a "$BOOTSTRAP_LOG"

# Prepare application directories and permissions
mkdir -p "$APP_ROOT" "$LOG_ROOT"
chown -R "$DEPLOY_USER":"$DEPLOY_USER" "$APP_ROOT" "$LOG_ROOT"
chmod 775 "$APP_ROOT" "$LOG_ROOT"

touch "$LOG_ROOT/app.log"
chown "$DEPLOY_USER":"$DEPLOY_USER" "$LOG_ROOT/app.log"
chmod 664 "$LOG_ROOT/app.log"

if [ ! -f "$ENV_FILE" ]; then
  cat <<EOF > "$ENV_FILE"
SPRING_PROFILES_ACTIVE=$${ENVIRONMENT}
AWS_REGION=$${AWS_REGION}
JAVA_TOOL_OPTIONS="-XX:+ExitOnOutOfMemoryError"
EOF
  chown "$DEPLOY_USER":"$DEPLOY_USER" "$ENV_FILE"
  chmod 600 "$ENV_FILE"
fi

if [ ! -f "$SERVICE_FILE" ]; then
  cat <<'SERVICE' > "$SERVICE_FILE"
[Unit]
Description=Umigo CRM Backend Service
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
User=ec2-user
EnvironmentFile=-/opt/umigo/backend/.env
WorkingDirectory=/opt/umigo/backend
ExecStart=/usr/bin/java -jar /opt/umigo/backend/backend.jar
Restart=on-failure
RestartSec=5
SuccessExitStatus=143
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
SERVICE
  chmod 644 "$SERVICE_FILE"
  systemctl daemon-reload
  systemctl enable umigo-backend.service || echo "[$(date -Is)] WARNING: failed to enable backend service" | tee -a "$BOOTSTRAP_LOG"
fi

echo "[$(date -Is)] Base bootstrap complete. CodeDeploy pipeline will deliver application artifacts to $APP_ROOT" | tee -a "$BOOTSTRAP_LOG"

echo "[$(date -Is)] Bootstrap completed" | tee -a "$BOOTSTRAP_LOG"
cat "$BOOTSTRAP_LOG" >> /var/log/cloud-init-output.log || true
exit 0
